{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"stage2_DANN.ipynb","provenance":[],"collapsed_sections":["d7xe_LHOwIfA"],"authorship_tag":"ABX9TyPxhqDd4KW+pIUodl6eh0xA"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"Isjqqa84yJv-","colab_type":"text"},"source":["**stage2_DANN**. This notebook is the initial attempt to train a DANN with UMAFall_waist as source data and UPFall_waist as target data.\n","\n","**Edit**<br/>\n","\n","**TODO**<br/>"]},{"cell_type":"markdown","metadata":{"id":"nswy3ke-TUyA","colab_type":"text"},"source":["# Import packages and get authenticated"]},{"cell_type":"code","metadata":{"id":"dR0gs1Ya0xmy","colab_type":"code","outputId":"b9089a6c-a803-4be8-e598-66f81a8fdd71","executionInfo":{"status":"ok","timestamp":1585233941741,"user_tz":-480,"elapsed":1034520,"user":{"displayName":"MICHAEL CHAN","photoUrl":"","userId":"10621351606155040584"}},"colab":{"base_uri":"https://localhost:8080/","height":0}},"source":["from google.colab import drive\n","drive.mount('drive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"DD6EM010PDWn","colab_type":"code","colab":{}},"source":["import numpy as np\n","\n","import pandas as pd\n","pd.set_option('display.max_columns', 500)\n","from tqdm import tqdm_notebook as tqdm\n","from IPython.display import display\n","import os\n","import sys\n","sys.path.append('/content/drive/My Drive/中研院/repo/')\n","\n","from utilities import *\n","from models import *\n","from dataset_util import *\n","from training_util import *\n","from eval_util import *\n","\n","import time\n","import datetime\n","from datetime import datetime\n","import json\n","\n","%matplotlib inline\n","import matplotlib\n","import matplotlib.pyplot as plt\n","matplotlib.rc( 'savefig', facecolor = 'white' )\n","\n","from sklearn.decomposition import PCA\n","\n","import torch\n","from torch.utils.data import Dataset, DataLoader\n","import torch.nn as nn\n","import torch.nn.functional as F"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TBArMSJl7xee","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ajkRQ49LxqSf","colab_type":"text"},"source":["### model unit testing"]},{"cell_type":"code","metadata":{"id":"a-uoK1gyv8Ca","colab_type":"code","outputId":"e121bd7b-ea25-4ef9-d676-cf3362691ab6","executionInfo":{"status":"ok","timestamp":1585233964974,"user_tz":-480,"elapsed":1057718,"user":{"displayName":"MICHAEL CHAN","photoUrl":"","userId":"10621351606155040584"}},"colab":{"base_uri":"https://localhost:8080/","height":0}},"source":["device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n","# device = torch.device('cpu')\n","print('show GPU device name:', torch.cuda.get_device_name(0))\n","model_1 = FeatureExtractor(input_dim=66).to(device).float()\n","\n","test_input = torch.randn((8, 3, 66), dtype=torch.double)\n","\n","test_input = test_input.to(device)\n","    # labels = labels.to(device).long()\n","\n","feature_out = model_1(test_input)\n","print('show model_1 output size:', feature_out.size())\n","\n","feature_out.data.detach().cpu().numpy()\n","\n","feature_out_dim =  feature_out.size()[1]\n","model_2 = ClassClassifier(num_classes=2, input_dim=feature_out_dim).to(device).float()\n","model_3 = DomainClassifier(num_classes=2, input_dim=feature_out_dim).to(device).float()\n","\n","model_2_out = model_2(feature_out)\n","print('show model_2 output size:', model_2_out.size())\n","\n","model_3_out = model_3(feature_out, 1)\n","print('show model_3 output size:', model_3_out.size())\n","\n","model_4 = CascadedModel(model_1, model_2)\n","# model_4 = nn.Sequential(model_1, model_2)\n","\n","print('model_4 output size', model_4(test_input).size())\n","\n","dann = DannModel(device, class_N=2, domain_N=2, channel_n=5, input_dim=66).to(device).float()\n","feature_out, class_output, domain_output = dann(test_input)\n","print('dann output size', feature_out.size(), class_output.size(), domain_output.size())\n","\n"],"execution_count":3,"outputs":[{"output_type":"stream","text":["show GPU device name: Tesla K80\n","FeatureExtractor_total_params: 1824\n","show model_1 output size: torch.Size([8, 576])\n","show model_2 output size: torch.Size([8, 2])\n","show model_3 output size: torch.Size([8, 2])\n","model_4 output size torch.Size([8, 2])\n","FeatureExtractor_total_params: 240\n","DannModel_total_params: 964\n","dann output size torch.Size([8, 180]) torch.Size([8, 2]) torch.Size([8, 2])\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"XztGPm3E0DMM","colab_type":"text"},"source":["# Exporting function for model performance, notebook parameters, and model"]},{"cell_type":"markdown","metadata":{"id":"RkElU-DQIjWr","colab_type":"text"},"source":["### performance_table"]},{"cell_type":"code","metadata":{"id":"WnZ1gBBy7aC3","colab_type":"code","colab":{}},"source":["# def performance_table(df_performance_table, src_name, tgt_name, training_params, inputdir, outputdir):\n","#   task_name = src_name+'_'+tgt_name\n","#   # df_performance_table[task_name] = ''\n","\n","#   start_time = time.time()\n","#   # print('========================transferring knowledge from source({}) to target({})========================'.format(src_name, tgt_name))\n","#   print('\\n==========================================================================================================================')\n","#   print('======================  train on source, val on target(source={} to target={})  ======================'.format(src_name, tgt_name))\n","#   print('==========================================================================================================================\\n')\n","#   source_outputs = BaselineModel_fitting(training_params, src_name, tgt_name, inputdir, outputdir+'source/')\n","#   print('\\n==========================================================================================================================')\n","#   print('======================  train on target, val on target(source={} to target={})  ======================'.format(src_name, tgt_name))\n","#   print('==========================================================================================================================\\n')\n","#   target_outputs = BaselineModel_fitting(training_params, tgt_name, src_name, inputdir, outputdir+'target/')\n","#   print('\\n==========================================================================================================================')\n","#   print('======================  DANN training transferring knowledge(source={} to target={})  ======================'.format(src_name, tgt_name))\n","#   print('==========================================================================================================================\\n')\n","  \n","#   # print('========================DANN training transferring knowledge from source({}) to target({})========================'.format(src_name, tgt_name))\n","#   dann_outputs = DannModel_fitting(training_params, src_name, tgt_name, inputdir, outputdir+'dann/')\n","\n","#   elapsed_time = time.time() - start_time\n","#   print('time elapsed:', time.strftime(\"%H:%M:%S\", time.gmtime(elapsed_time)))\n","\n","#   (val_tgt_class_acc_mean, val_tgt_class_acc_std), (val_domain_acc_mean, val_domain_acc_std) = dann_outputs\n","#   (_,_), (source_tgt_acc_mean, source_tgt_acc_std) = source_outputs\n","#   (target_tgt_acc_mean, target_tgt_acc_std), (_,_) = target_outputs\n","\n","#   df_performance_table.loc['source',task_name] = '{:.3f}±{:.3f}'.format(source_tgt_acc_mean, source_tgt_acc_std)\n","#   df_performance_table.loc['DANN',task_name] = '{:.3f}±{:.3f}'.format(val_tgt_class_acc_mean, val_tgt_class_acc_std)\n","#   df_performance_table.loc['target',task_name] = '{:.3f}±{:.3f}'.format(target_tgt_acc_mean, target_tgt_acc_std)\n","#   df_performance_table.loc['domain',task_name] = '{:.3f}±{:.3f}'.format(val_domain_acc_mean, val_domain_acc_std)\n","\n","#   return df_performance_table"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eRhy-A9TNFE6","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Q9oGUEu4NFMQ","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"HMd1cjTu2QNF","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sOBgdptINRDH","colab_type":"text"},"source":["# ADDA implementation"]},{"cell_type":"code","metadata":{"id":"nFMQOkO_NFKo","colab_type":"code","colab":{}},"source":["# class AddaModel(nn.Module):\n","#   def __init__(self, device, class_N=2, domain_N=2, channel_n=16, input_dim=10):\n","#     super(AddaModel, self).__init__()\n","#     self.feature_extractor = FeatureExtractor(input_dim=input_dim, channel_n=channel_n).to(device).float()\n","#     cnn_layer1_dim = (input_dim+2*2-1*(3-1)-1)+1\n","#     pool_layer1_dim = (cnn_layer1_dim-1*(2-1)-1)/2+1\n","\n","#     cnn_layer2_dim = (pool_layer1_dim+2*2-1*(3-1)-1)+1\n","#     pool_layer2_dim = (cnn_layer2_dim-1*(2-1)-1)/2+1\n","\n","#     feature_out_dim = int(pool_layer2_dim*channel_n*2)\n","\n","#     self.class_classfier = ClassClassifier(num_classes=class_N, input_dim=feature_out_dim).to(device).float()\n","#     self.domain_classifier = DomainClassifier(num_classes=domain_N, input_dim=feature_out_dim).to(device).float()\n","      \n","#   def forward(self, x):\n","#     feature_out = self.feature_extractor(x)\n","#     class_output = self.class_classfier(feature_out)\n","#     domain_output = self.domain_classifier(feature_out, 1)\n","#     return feature_out, class_output, domain_output\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"b-CESaTgYGar","colab_type":"code","colab":{}},"source":["# # fine-tuning\n","# tasks_list = [('UMAFall_waist', 'UPFall_belt')]\n","\n","# # training_params = {\n","# #     'classes_n': 2,\n","# #     'CV_n': 17,\n","# #     'num_epochs': 10,\n","# #     'channel_n': 4,\n","# #     'batch_size': 64,\n","# #     'learning_rate': 0.01,\n","# #     'extractor_type': 'CNN'}\n","\n","# training_params =\n","#   {\n","#     'classes_n': 2,\n","#     'CV_n': 17,\n","#     'num_epochs': 10,\n","#     'channel_n': 16,\n","#     'batch_size': 4,\n","#     'learning_rate': 0.01,\n","#     'extractor_type': 'CNN'}\n","\n","# start_time = time.time()\n","# df_performance_table = pd.DataFrame('', index=['source', 'DANN', 'target', 'domain'], columns=[])\n","\n","# for task_item in tasks_list:\n","#   (src_name, tgt_name) = task_item\n","\n","#   inputdir = '/content/drive/My Drive/中研院/data_mic/stage1_preprocessed_18hz_LOO/'\n","#   outputdir = '/content/drive/My Drive/中研院/data_mic/stage2_modeloutput_18hz_LOO/{}_{}/'.format(src_name, tgt_name)\n","#   if not os.path.exists(outputdir):\n","#       os.makedirs(outputdir)\n","#   print('outputdir for stage2 output:', outputdir)\n","\n","#   df_performance_table = performance_table(df_performance_table, src_name, tgt_name, training_params, inputdir, outputdir)\n","#   # display(df_performance_table)\n","\n","# time_elapsed = time.time() - start_time\n","# print('time elapsed:', time_elapsed)\n","# df_performance_table.loc['time_elapsed'] = time_elapsed\n","# display(df_performance_table)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"-d0jD-VYYs1w","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"tESfB1iuNFH-","colab_type":"code","colab":{}},"source":["# df_performance_table\n","\n","# df_outputdir = '/content/drive/My Drive/中研院/data_mic/stage2_modeloutput_18hz/hyperparameter_ft/{}_{}/'.format(src_name, tgt_name)\n","\n","# if not os.path.exists(df_outputdir):\n","#   os.makedirs(df_outputdir)\n","# df_performance_table.to_csv(df_outputdir+'df_performance_table_learning_rate{}.csv'.format(training_params['learning_rate']), encoding='utf-8')\n","\n","\n","# df_outputdir+'df_performance_table_learning_rate{}.csv'.format(training_params['learning_rate'])"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LX-641qIpd33","colab_type":"text"},"source":["# optimal hyperparameter"]},{"cell_type":"code","metadata":{"id":"unuHYyZyASWB","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"rwbs2kQupbdn","colab_type":"code","outputId":"69fd6755-7ac2-4910-e066-280bf45c4726","executionInfo":{"status":"ok","timestamp":1584629541368,"user_tz":-480,"elapsed":699015,"user":{"displayName":"MICHAEL CHAN","photoUrl":"","userId":"10621351606155040584"}},"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1lm_fSg4MuxV7GajyTTrYtYX_BoqiURla"}},"source":["# optimal\n","\n","# tasks_list = [('UMAFall_waist', 'UPFall_belt')]\n","tasks_list = [('UPFall_belt', 'UMAFall_waist')]\n","# tasks_list = [('UMAFall_ankle', 'UPFall_ankle')]\n","# tasks_list = [('UMAFall_wrist', 'UPFall_wrist')]\n","# tasks_list = [('UMAFall_leg', 'UPFall_rightpocket')]\n","\n","optimal_training_params = {\n","  'classes_n': 2,\n","  'CV_n': 17,\n","  'num_epochs': 10,\n","  'channel_n': 4,\n","  'batch_size': 4,\n","  'learning_rate': 0.01,\n","  'extractor_type': 'CNN'}\n","\n","# for i, training_params in enumerate(training_params_list):\n","df_performance_table = pd.DataFrame('', index=['source', 'DANN', 'target', 'domain'], columns=[])\n","\n","for task_item in tasks_list:\n","  start_time = time.time()\n","\n","  (src_name, tgt_name) = task_item\n","\n","  inputdir = '/content/drive/My Drive/中研院/data_mic/stage1_preprocessed_18hz_LOO/'\n","  outputdir = '/content/drive/My Drive/中研院/data_mic/stage2_modeloutput_18hz_LOO_testing/{}_{}/'.format(src_name, tgt_name)\n","  if not os.path.exists(outputdir):\n","      os.makedirs(outputdir)\n","  print('outputdir for stage2 output:', outputdir)\n","\n","  df_performance_table = performance_table_v2(df_performance_table, src_name, tgt_name, optimal_training_params, inputdir, outputdir)\n","  # df_performance_table = performance_table_v2(df_performance_table, get_UMAFall_loader, get_UPFall_loader, src_name, tgt_name, optimal_training_params, inputdir, outputdir)\n","\n","  time_elapsed = time.time() - start_time\n","  print('time elapsed:', time_elapsed)\n","  df_performance_table.loc['time_elapsed'] = time_elapsed\n","\n","  df_outputdir = outputdir\n","\n","  print('df_performance_table saved at', df_outputdir)\n","  df_performance_table.to_csv(df_outputdir+'df_performance_table_optimal.csv', encoding='utf-8')\n","\n","  display(df_performance_table)"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"B1Gq_9tgZtIY","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Mj0AqSiIChBG","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hnTE0_m3ZtGI","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"62FVgtebZtEq","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XdKQrqwjZt-V","colab_type":"text"},"source":["## hyperparameter testing for "]},{"cell_type":"code","metadata":{"id":"XlHlSQ8DZtAE","colab_type":"code","colab":{}},"source":["# # fine-tuning\n","# tasks_list = [('UMAFall_ankle', 'UPFall_ankle')]\n","\n","# training_params_list = [\n","#   {\n","#     'classes_n': 2,\n","#     'CV_n': 17,\n","#     'num_epochs': 10,\n","#     'channel_n': 4,\n","#     'batch_size': 16,\n","#     'learning_rate': 0.01,\n","#     'extractor_type': 'CNN'}, \n","#   {\n","#     'classes_n': 2,\n","#     'CV_n': 17,\n","#     'num_epochs': 10,\n","#     'channel_n': 4,\n","#     'batch_size': 4,\n","#     'learning_rate': 0.01,\n","#     'extractor_type': 'CNN'}, \n","#   {\n","#     'classes_n': 2,\n","#     'CV_n': 17,\n","#     'num_epochs': 10,\n","#     'channel_n': 4,\n","#     'batch_size': 64,\n","#     'learning_rate': 0.01,\n","#     'extractor_type': 'CNN'}, \n","    \n","#   {\n","#     'classes_n': 2,\n","#     'CV_n': 17,\n","#     'num_epochs': 10,\n","#     'channel_n': 16,\n","#     'batch_size': 4,\n","#     'learning_rate': 0.01,\n","#     'extractor_type': 'CNN'}, \n","#   {\n","#     'classes_n': 2,\n","#     'CV_n': 17,\n","#     'num_epochs': 10,\n","#     'channel_n': 32,\n","#     'batch_size': 4,\n","#     'learning_rate': 0.01,\n","#     'extractor_type': 'CNN'}, \n","\n","#   {\n","#     'classes_n': 2,\n","#     'CV_n': 17,\n","#     'num_epochs': 10,\n","#     'channel_n': 4,\n","#     'batch_size': 4,\n","#     'learning_rate': 0.001,\n","#     'extractor_type': 'CNN'}, \n","#   {\n","#     'classes_n': 2,\n","#     'CV_n': 17,\n","#     'num_epochs': 10,\n","#     'channel_n': 4,\n","#     'batch_size': 4,\n","#     'learning_rate': 0.0001,\n","#     'extractor_type': 'CNN'}, ]\n","\n","# for i, training_params in enumerate(training_params_list):\n","#   start_time = time.time()\n","#   df_performance_table = pd.DataFrame('', index=['source', 'DANN', 'target', 'domain'], columns=[])\n","\n","#   for task_item in tasks_list:\n","#     (src_name, tgt_name) = task_item\n","\n","#     # inputdir = '/content/drive/My Drive/中研院/data_mic/stage1_preprocessed_18hz/'\n","#     # outputdir = '/content/drive/My Drive/中研院/data_mic/stage2_modeloutput_18hz/{}_{}/'.format(src_name, tgt_name)\n","\n","#     inputdir = '/content/drive/My Drive/中研院/data_mic/stage1_preprocessed_18hz_LOO/'\n","#     outputdir = '/content/drive/My Drive/中研院/data_mic/stage2_modeloutput_18hz_LOO/{}_{}/'.format(src_name, tgt_name)\n","#     if not os.path.exists(outputdir):\n","#         os.makedirs(outputdir)\n","#     print('outputdir for stage2 output:', outputdir)\n","\n","#     df_performance_table = performance_table(df_performance_table, src_name, tgt_name, training_params, inputdir, outputdir)\n","#     # display(df_performance_table)\n","\n","#   time_elapsed = time.time() - start_time\n","#   print('time elapsed:', time_elapsed)\n","#   df_performance_table.loc['time_elapsed'] = time_elapsed\n","#   display(df_performance_table)\n","\n","#   df_outputdir = '/content/drive/My Drive/中研院/data_mic/stage2_modeloutput_18hz_LOO/hyperparameter_ft/{}_{}/'.format(src_name, tgt_name)\n","#   if not os.path.exists(df_outputdir):\n","#     os.makedirs(df_outputdir)\n","#   df_performance_table.to_csv(df_outputdir+'df_performance_table_i{}.csv'.format(i), encoding='utf-8')\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jZ28VOuXZs9b","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TP8mnbCMZs3T","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DEMl8O6SZsw6","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"3B6xF-AO0UiV","colab_type":"code","colab":{}},"source":["# df_performance_table = pd.DataFrame(0, index=['source', 'DANN', 'target', 'domain'], columns=[])\n","# tasks_list = [('UMAFall_waist', 'UPFall_belt'), ('UMAFall_ankle', 'UPFall_ankle'), ('UMAFall_wrist', 'UPFall_wrist'), ('UMAFall_leg', 'UPFall_rightpocket'), ('UMAFall_all', 'UPFall_all')]\n","\n","# optimal_training_params = {\n","#     'classes_n': 2,\n","#     'CV_n': 5,\n","#     'num_epochs': 3,\n","#     'channel_n': 32,\n","#     'batch_size': 1,\n","#     'learning_rate': 0.01}\n","\n","# for task_item in tasks_list:\n","#   (src_name, tgt_name) = task_item\n","\n","#   # inputdir = '/content/drive/My Drive/中研院/data_mic/stage1_preprocessed/'\n","#   # outputdir = '/content/drive/My Drive/中研院/data_mic/stage2_modeloutput/{}_{}/'.format(src_name, tgt_name)\n","#   inputdir = '/content/drive/My Drive/中研院/data_mic/stage1_preprocessed_18hz/'\n","#   outputdir = '/content/drive/My Drive/中研院/data_mic/stage2_modeloutput_18hz/{}_{}/'.format(src_name, tgt_name)\n","#   if not os.path.exists(outputdir):\n","#       os.makedirs(outputdir)\n","#   print('outputdir for stage2 output:', outputdir)\n","\n","#   performance_table(src_name, tgt_name, optimal_training_params, df_performance_table, inputdir, outputdir)\n","#   display(df_performance_table)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"d7xe_LHOwIfA","colab_type":"text"},"source":["# \"remove one sensor at a time\" experiment"]},{"cell_type":"code","metadata":{"id":"WsVelXEWwHk_","colab_type":"code","colab":{}},"source":["df_performance_table = pd.DataFrame(0, index=['source', 'DANN', 'target', 'domain'], columns=[])\n","tasks_list = [('UMAFall_allbutwrist', 'UPFall_allbutwrist'), ('UMAFall_allbutwaist', 'UPFall_allbutwaist'), ('UMAFall_allbutleg', 'UPFall_allbutleg'), ('UMAFall_allbutankle', 'UPFall_allbutankle'), ('UMAFall_allbutfifth', 'UPFall_allbutfifth')]\n","# tasks_list = [('UMAFall_allbutwrist', 'UPFall_allbutwrist'), ('UMAFall_ankle', 'UPFall_ankle'), ('UMAFall_wrist', 'UPFall_wrist'), ('UMAFall_leg', 'UPFall_rightpocket'), ('UMAFall_all', 'UPFall_all')]\n","\n","optimal_training_params = {\n","    'classes_n': 2,\n","    'CV_n': 5,\n","    'num_epochs': 3,\n","    'channel_n': 32,\n","    'batch_size': 1,\n","    'learning_rate': 0.01}\n","\n","for task_item in tasks_list:\n","  (src_name, tgt_name) = task_item\n","\n","  # inputdir = '/content/drive/My Drive/中研院/data_mic/stage1_preprocessed/'\n","  # outputdir = '/content/drive/My Drive/中研院/data_mic/stage2_modeloutput/{}_{}/'.format(src_name, tgt_name)\n","  inputdir = '/content/drive/My Drive/中研院/data_mic/stage1_preprocessed_18hz/'\n","  outputdir = '/content/drive/My Drive/中研院/data_mic/stage2_modeloutput_18hz/{}_{}/'.format(src_name, tgt_name)\n","  if not os.path.exists(outputdir):\n","      os.makedirs(outputdir)\n","  print('outputdir for stage2 output:', outputdir)\n","\n","  performance_table(src_name, tgt_name, optimal_training_params, df_performance_table, inputdir, outputdir)\n","  display(df_performance_table)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"H7qSJXzNSMCJ","colab_type":"text"},"source":["# Repeat 10 times experiment"]},{"cell_type":"code","metadata":{"id":"RDKDIcO0SQ8Z","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Km67SbGBAnIp","colab_type":"code","colab":{}},"source":["# for i in range(0,10):\n","for i in range(1,5):\n","  start_time = time.time()\n","\n","  df_performance_table = pd.DataFrame(0, index=['source', 'DANN', 'target', 'domain'], columns=[])\n","  # tasks_list = [('UMAFall_waist', 'UPFall_belt'), ('UMAFall_ankle', 'UPFall_ankle'), ('UMAFall_wrist', 'UPFall_wrist'), ('UMAFall_leg', 'UPFall_rightpocket'), ('UMAFall_all', 'UPFall_all')]\n","  tasks_list = [('UMAFall_waist', 'UPFall_belt'), ('UMAFall_ankle', 'UPFall_ankle'), ('UMAFall_wrist', 'UPFall_wrist'), ('UMAFall_leg', 'UPFall_rightpocket')]\n","\n","  # optimal_training_params = {\n","  #     'classes_n': 2,\n","  #     'CV_n': 5,\n","  #     'num_epochs': 3,\n","  #     'channel_n': 32,\n","  #     'batch_size': 1,\n","  #     'learning_rate': 0.01}\n","\n","  optimal_training_params = {\n","      'classes_n': 2,\n","      'CV_n': 10,\n","      'num_epochs': 10,\n","      'channel_n': 4,\n","      'batch_size': 4,\n","      'learning_rate': 0.01,\n","      'extractor_type': 'CNN'}\n","\n","  for task_item in tasks_list:\n","    (src_name, tgt_name) = task_item\n","\n","\n","    # inputdir = '/content/drive/My Drive/中研院/data_mic/stage1_preprocessed_18hz/'\n","    # outputdir = '/content/drive/My Drive/中研院/data_mic/stage2_modeloutput_18hz/{}_{}/'.format(src_name, tgt_name)\n","    inputdir = '/content/drive/My Drive/中研院/data_mic/stage1_preprocessed_18hz_LOO/'\n","    outputdir = '/content/drive/My Drive/中研院/data_mic/stage2_modeloutput_18hz_LOO/{}_{}/'.format(src_name, tgt_name)\n","    if not os.path.exists(outputdir):\n","        os.makedirs(outputdir)\n","    print('outputdir for stage2 output:', outputdir)\n","\n","    # performance_table(src_name, tgt_name, optimal_training_params, df_performance_table, inputdir, outputdir)\n","    df_performance_table = performance_table(df_performance_table, src_name, tgt_name, optimal_training_params, inputdir, outputdir)\n","    display(df_performance_table)\n","\n","  # df_outputdir = '/content/drive/My Drive/中研院/data_mic/stage2_modeloutput_18hz/repetitive_results/'\n","  df_outputdir = '/content/drive/My Drive/中研院/data_mic/stage2_modeloutput_18hz_LOO/repetitive_results/'\n","  if not os.path.exists(df_outputdir):\n","    os.makedirs(df_outputdir)\n","  df_performance_table.to_csv(df_outputdir+'df_performance_table_trial{}.csv'.format(i), encoding='utf-8')\n","\n","  elapsed_time = time.time() - start_time\n","  print('time elapsed:', elapsed_time)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"PT0nxNaGqxim","colab_type":"code","colab":{}},"source":["# for i in range(0,10):\n","# # for i in range(0,1):\n","#   start_time = time.time()\n","\n","#   df_performance_table = pd.DataFrame(0, index=['source', 'DANN', 'target', 'domain'], columns=[])\n","#   tasks_list = [('UMAFall_waist', 'UPFall_belt'), ('UMAFall_ankle', 'UPFall_ankle'), ('UMAFall_wrist', 'UPFall_wrist'), ('UMAFall_leg', 'UPFall_rightpocket'), ('UMAFall_all', 'UPFall_all')]\n","#   # tasks_list = [('UMAFall_waist', 'UPFall_belt'), ('UMAFall_ankle', 'UPFall_ankle'), ('UMAFall_wrist', 'UPFall_wrist'), ('UMAFall_leg', 'UPFall_rightpocket')]\n","\n","#   # optimal_training_params = {\n","#   #     'classes_n': 2,\n","#   #     'CV_n': 5,\n","#   #     'num_epochs': 3,\n","#   #     'channel_n': 32,\n","#   #     'batch_size': 1,\n","#   #     'learning_rate': 0.01}\n","\n","#   optimal_training_params = {\n","#       'classes_n': 2,\n","#       'CV_n': 10,\n","#       'num_epochs': 5,\n","#       'channel_n': 4,\n","#       'batch_size': 4,\n","#       'learning_rate': 0.01,\n","#       'extractor_type': 'CNN'}\n","\n","#   for task_item in tasks_list:\n","#     (src_name, tgt_name) = task_item\n","\n","\n","#     # inputdir = '/content/drive/My Drive/中研院/data_mic/stage1_preprocessed_18hz/'\n","#     # outputdir = '/content/drive/My Drive/中研院/data_mic/stage2_modeloutput_18hz/{}_{}/'.format(src_name, tgt_name)\n","#     inputdir = '/content/drive/My Drive/中研院/data_mic/stage1_preprocessed_18hz_LOO/'\n","#     outputdir = '/content/drive/My Drive/中研院/data_mic/stage2_modeloutput_18hz_LOO/{}_{}/'.format(src_name, tgt_name)\n","#     if not os.path.exists(outputdir):\n","#         os.makedirs(outputdir)\n","#     print('outputdir for stage2 output:', outputdir)\n","\n","#     # performance_table(src_name, tgt_name, optimal_training_params, df_performance_table, inputdir, outputdir)\n","#     df_performance_table = performance_table(df_performance_table, src_name, tgt_name, optimal_training_params, inputdir, outputdir)\n","#     display(df_performance_table)\n","\n","#   # df_outputdir = '/content/drive/My Drive/中研院/data_mic/stage2_modeloutput_18hz/repetitive_results/'\n","#   df_outputdir = '/content/drive/My Drive/中研院/data_mic/stage2_modeloutput_18hz_LOO/repetitive_results/'\n","#   if not os.path.exists(df_outputdir):\n","#     os.makedirs(df_outputdir)\n","#   df_performance_table.to_csv(df_outputdir+'df_performance_table_trial{}.csv'.format(i), encoding='utf-8')\n","\n","#   elapsed_time = time.time() - start_time\n","#   print('time elapsed:', elapsed_time)\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QpP2Uo4sXXdL","colab_type":"text"},"source":["# fill in the rest of performance table"]},{"cell_type":"code","metadata":{"id":"hwpICWaRXXx0","colab_type":"code","colab":{}},"source":["# for i in range(0,10):\n","df_performance_table = pd.DataFrame(0, index=['source', 'DANN', 'target', 'domain'], columns=[])\n","tasks_list = [('UPFall_belt', 'UMAFall_waist'), ('UPFall_ankle', 'UMAFall_ankle'), ('UPFall_wrist', 'UMAFall_wrist'), ('UPFall_rightpocket', 'UMAFall_leg'), ('UPFall_neck', 'UMAFall_chest'), ('UMAFall_all', 'UPFall_all')]\n","\n","optimal_training_params = {\n","    'classes_n': 2,\n","    'CV_n': 5,\n","    'num_epochs': 3,\n","    'channel_n': 32,\n","    'batch_size': 1,\n","    'learning_rate': 0.01}\n","\n","for task_item in tasks_list:\n","  (src_name, tgt_name) = task_item\n","\n","  inputdir = '/content/drive/My Drive/中研院/data_mic/stage1_preprocessed_18hz/'\n","  outputdir = '/content/drive/My Drive/中研院/data_mic/stage2_modeloutput_18hz/{}_{}/'.format(src_name, tgt_name)\n","  if not os.path.exists(outputdir):\n","      os.makedirs(outputdir)\n","  print('outputdir for stage2 output:', outputdir)\n","\n","  performance_table(src_name, tgt_name, optimal_training_params, df_performance_table, inputdir, outputdir)\n","  display(df_performance_table)\n","\n","  # df_outputdir = '/content/drive/My Drive/中研院/data_mic/stage2_modeloutput_18hz/repetitive_results/'\n","  # if not os.path.exists(df_outputdir):\n","  #   os.makedirs(df_outputdir)\n","  # df_performance_table.to_csv(df_outputdir+'df_performance_table_trial{}.csv'.format(i), encoding='utf-8')\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"364qjj67EDmH","colab_type":"text"},"source":["# Feature space clustering"]},{"cell_type":"code","metadata":{"id":"tnK88jJ3kXd3","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"K05nGUkKRU0S","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"bTuPZryA0XDr","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5BIaUPJ-0XBz","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JWcFYNkc1S12","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}
