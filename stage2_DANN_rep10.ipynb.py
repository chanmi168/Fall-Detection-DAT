{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"stage2_DANN_rep10.ipynb","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOJNycV53BCy3BmN3hzefoo"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"Isjqqa84yJv-","colab_type":"text"},"source":["**stage2_DANN**. This notebook is the initial attempt to train a DANN with UMAFall as source data and UPFall as target data.\n","\n","**Edit**<br/>\n","\n","**TODO**<br/>"]},{"cell_type":"markdown","metadata":{"id":"nswy3ke-TUyA","colab_type":"text"},"source":["# Import packages and get authenticated"]},{"cell_type":"code","metadata":{"id":"dR0gs1Ya0xmy","colab_type":"code","colab":{}},"source":["from google.colab import drive\n","drive.mount('drive')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DD6EM010PDWn","colab_type":"code","colab":{}},"source":["import numpy as np\n","\n","import pandas as pd\n","pd.set_option('display.max_columns', 500)\n","from tqdm import tqdm_notebook as tqdm\n","from IPython.display import display\n","import os\n","import sys\n","sys.path.append('/content/drive/My Drive/中研院/repo/')\n","\n","from utilities import *\n","from models import *\n","from dataset_util import *\n","from training_util import *\n","from eval_util import *\n","\n","import time\n","import datetime\n","from datetime import datetime\n","import json\n","\n","%matplotlib inline\n","import matplotlib\n","import matplotlib.pyplot as plt\n","matplotlib.rc( 'savefig', facecolor = 'white' )\n","\n","from sklearn.decomposition import PCA\n","\n","import torch\n","from torch.utils.data import Dataset, DataLoader\n","import torch.nn as nn\n","import torch.nn.functional as F"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TBArMSJl7xee","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DEMl8O6SZsw6","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"H7qSJXzNSMCJ","colab_type":"text"},"source":["# Repeat 10 times experiment"]},{"cell_type":"code","metadata":{"id":"JLThspTpRn6Q","colab_type":"code","colab":{}},"source":["rep_n = 5\n","\n","extractor_type = 'CNN'\n","num_epochs = 10\n","CV_n = 17\n","\n","device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n","\n","\n","tasks_params_list = [\n","\n","    \n","  { 'HP_name': 'opitmal',\n","    'task': ('UMAFall_waist', 'UPFall_wrist'),\n","    'classes_n': 2,\n","    'CV_n': CV_n,\n","    'num_epochs': num_epochs,\n","    'channel_n': 4,\n","    'batch_size': 4,\n","    'learning_rate': 0.0001,\n","    'extractor_type': extractor_type,\n","    'device': device}, \n","    \n","] \n","\n","\n","for tasks_params in tasks_params_list:\n","\n","  (src_name, tgt_name) = tasks_params['task']\n","\n","  if 'rightpocket' in src_name or 'leg' in tgt_name or 'rightpocket' in tgt_name or 'leg' in src_name:\n","    tasks_params['CV_n'] = 15\n","  else:\n","    tasks_params['CV_n'] = 17\n","\n","\n","  inputdir = '/content/drive/My Drive/中研院/data_mic/stage1_preprocessed_18hz_LOO/'\n","  outputdir = '/content/drive/My Drive/中研院/data_mic/stage2_modeloutput_18hz_LOO/{}_{}/'.format(src_name, tgt_name)\n","  if not os.path.exists(outputdir):\n","      os.makedirs(outputdir)\n","  print('outputdir for stage2 output:', outputdir)\n","\n","  # df_performance_table = pd.DataFrame(0, index=['source', 'DANN', 'target', 'domain'], columns=[])\n","  for i in range(0,rep_n):\n","    start_time = time.time()\n","    df_performance_table = performance_table(src_name, tgt_name, tasks_params, inputdir, outputdir)\n","    time_elapsed = time.time() - start_time\n","    print('time elapsed:', time_elapsed)\n","    df_performance_table.loc['time_elapsed'] = time_elapsed\n","\n","    # df_performance_table_agg['rep10_i{}.csv'.format(i)] = df_performance_table\n","\n","\n","    df_outputdir = outputdir+'repetitive_results/'\n","    if not os.path.exists(df_outputdir):\n","      os.makedirs(df_outputdir)\n","    print('df_performance_table saved at', outputdir)\n","\n","    # Serialize data into file:\n","    json.dump({key:val for key, val in tasks_params.items() if key != 'device'}, open(df_outputdir+'optimal_training_params.json', 'w'))\n","\n","    df_performance_table.to_csv(df_outputdir+'df_performance_table_rep10_i{}.csv'.format(i), encoding='utf-8')\n","\n","    display(df_performance_table)\n","\n","\n","  df_performance_table_all = get_rep10_stats(df_outputdir, rep_n)\n","  display(df_performance_table_all)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KyjpgOGqG1gX","colab_type":"code","colab":{}},"source":["# rep_n = 5\n","\n","# extractor_type = 'CNN'\n","# num_epochs = 10\n","# CV_n = 17\n","\n","# device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n","\n","\n","# tasks_params_list = [\n","\n","    \n","#   { 'task': ('UMAFall_chest', 'UPFall_ankle'),\n","#     'classes_n': 2,\n","#     'CV_n': CV_n,\n","#     'num_epochs': num_epochs,\n","#     'channel_n': 4,\n","#     'batch_size': 4,\n","#     'learning_rate': 0.001,\n","#     'extractor_type': extractor_type,\n","#     'device': device}, \n","\n","#   { 'task': ('UMAFall_leg', 'UPFall_wrist'),\n","#     'classes_n': 2,\n","#     'CV_n': CV_n,\n","#     'num_epochs': num_epochs,\n","#     'channel_n': 32,\n","#     'batch_size': 64,\n","#     'learning_rate': 0.001,\n","#     'extractor_type': extractor_type,\n","#     'device': device},\n","    \n","# ] \n","\n","\n","# for tasks_params in tasks_params_list:\n","\n","#   (src_name, tgt_name) = tasks_params['task']\n","\n","#   if 'rightpocket' in src_name or 'leg' in tgt_name or 'rightpocket' in tgt_name or 'leg' in src_name:\n","#     tasks_params['CV_n'] = 15\n","#   else:\n","#     tasks_params['CV_n'] = 17\n","\n","\n","#   inputdir = '/content/drive/My Drive/中研院/data_mic/stage1_preprocessed_18hz_LOO/'\n","#   outputdir = '/content/drive/My Drive/中研院/data_mic/stage2_modeloutput_18hz_LOO/{}_{}/'.format(src_name, tgt_name)\n","#   if not os.path.exists(outputdir):\n","#       os.makedirs(outputdir)\n","#   print('outputdir for stage2 output:', outputdir)\n","\n","#   # df_performance_table = pd.DataFrame(0, index=['source', 'DANN', 'target', 'domain'], columns=[])\n","#   for i in range(0,rep_n):\n","#     start_time = time.time()\n","#     df_performance_table = performance_table(src_name, tgt_name, tasks_params, inputdir, outputdir)\n","#     time_elapsed = time.time() - start_time\n","#     print('time elapsed:', time_elapsed)\n","#     df_performance_table.loc['time_elapsed'] = time_elapsed\n","\n","#     # df_performance_table_agg['rep10_i{}.csv'.format(i)] = df_performance_table\n","\n","\n","#     df_outputdir = outputdir+'repetitive_results/'\n","#     if not os.path.exists(df_outputdir):\n","#       os.makedirs(df_outputdir)\n","#     print('df_performance_table saved at', outputdir)\n","\n","#     # Serialize data into file:\n","#     json.dump({key:val for key, val in tasks_params.items() if key != 'device'}, open(df_outputdir+'optimal_training_params.json', 'w'))\n","\n","#     df_performance_table.to_csv(df_outputdir+'df_performance_table_rep10_i{}.csv'.format(i), encoding='utf-8')\n","\n","#     display(df_performance_table)\n","\n","\n","#   df_performance_table_all = get_rep10_stats(df_outputdir, rep_n)\n","#   display(df_performance_table_all)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"fQ56uBqEG1ls","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"P-u1QqXBG1jj","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"lzYcMe0YG1eI","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"xokq8vUqUDt8","colab_type":"code","colab":{}},"source":["# del tasks_params['device']\n","# tasks_params\n","\n","{key:val for key, val in tasks_params.items() if key != 'CV_n'}, tasks_params"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Km67SbGBAnIp","colab_type":"code","colab":{}},"source":["rep_n = 10\n","\n","extractor_type = 'CNN'\n","num_epochs = 10\n","CV_n = 15\n","device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n","\n","for i in range(0,rep_n):\n","  # start_time = time.time()\n","\n","  df_performance_table = pd.DataFrame(0, index=['source', 'DANN', 'target', 'domain'], columns=[])\n","  # tasks_list = [('UMAFall_waist', 'UPFall_belt')]\n","  # tasks_list = [('UMAFall_ankle', 'UPFall_ankle')]\n","  # tasks_list = [('UPFall_belt', 'UMAFall_waist')]\n","  # tasks_list = [('UPFall_wrist', 'UMAFall_wrist')]\n","  tasks_list = [('UMAFall_wrist', 'UPFall_rightpocket')]\n","\n","  optimal_training_params = {\n","      'classes_n': 2,\n","      'CV_n': CV_n,\n","      'num_epochs': num_epochs,\n","      'channel_n': 4,\n","      'batch_size': 16,\n","      'learning_rate': 0.01,\n","      'extractor_type': extractor_type,\n","      'device': device,}\n","\n","  for task_item in tasks_list:\n","    start_time = time.time()\n","    (src_name, tgt_name) = task_item\n","\n","    inputdir = '/content/drive/My Drive/中研院/data_mic/stage1_preprocessed_18hz_LOO/'\n","    outputdir = '/content/drive/My Drive/中研院/data_mic/stage2_modeloutput_18hz_LOO/{}_{}/'.format(src_name, tgt_name)\n","    if not os.path.exists(outputdir):\n","        os.makedirs(outputdir)\n","    print('outputdir for stage2 output:', outputdir)\n","\n","    df_performance_table = performance_table(df_performance_table, src_name, tgt_name, optimal_training_params, inputdir, outputdir)\n","\n","    time_elapsed = time.time() - start_time\n","    print('time elapsed:', time_elapsed)\n","    df_performance_table.loc['time_elapsed'] = time_elapsed\n","\n","    df_outputdir = outputdir+'repetitive_results/'\n","    if not os.path.exists(df_outputdir):\n","      os.makedirs(df_outputdir)\n","\n","    print('df_performance_table saved at', outputdir)\n","    df_performance_table.to_csv(df_outputdir+'df_performance_table_rep10_i{}.csv'.format(i), encoding='utf-8')\n","\n","    display(df_performance_table)\n","\n","\n","df_performance_table_all = get_rep10_stats(df_outputdir, rep_n)\n","display(df_performance_table_all)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JWcFYNkc1S12","colab_type":"code","colab":{}},"source":["# extractor_type = 'CNN'\n","# num_epochs = 10\n","# device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n","\n","\n","# for i in range(0,rep_n):\n","#   # start_time = time.time()\n","\n","#   df_performance_table = pd.DataFrame(0, index=['source', 'DANN', 'target', 'domain'], columns=[])\n","#   # tasks_list = [('UMAFall_waist', 'UPFall_belt')]\n","#   # tasks_list = [('UMAFall_ankle', 'UPFall_ankle')]\n","#   tasks_list = [('UPFall_ankle', 'UMAFall_ankle')]\n","\n","\n","#   optimal_training_params = {\n","#       'classes_n': 2,\n","#       'CV_n': 17,\n","#       'num_epochs': 10,\n","#       'channel_n': 4,\n","#       'batch_size': 4,\n","#       'learning_rate': 0.001,\n","#       'extractor_type': extractor_type,\n","#       'device': device,}\n","\n","#   for task_item in tasks_list:\n","#     start_time = time.time()\n","#     (src_name, tgt_name) = task_item\n","\n","#     inputdir = '/content/drive/My Drive/中研院/data_mic/stage1_preprocessed_18hz_LOO/'\n","#     outputdir = '/content/drive/My Drive/中研院/data_mic/stage2_modeloutput_18hz_LOO/{}_{}/'.format(src_name, tgt_name)\n","#     if not os.path.exists(outputdir):\n","#         os.makedirs(outputdir)\n","#     print('outputdir for stage2 output:', outputdir)\n","\n","#     df_performance_table = performance_table(df_performance_table, src_name, tgt_name, optimal_training_params, inputdir, outputdir)\n","\n","#     time_elapsed = time.time() - start_time\n","#     print('time elapsed:', time_elapsed)\n","#     df_performance_table.loc['time_elapsed'] = time_elapsed\n","\n","#     df_outputdir = outputdir+'/repetitive_results/'\n","#     if not os.path.exists(df_outputdir):\n","#       os.makedirs(df_outputdir)\n","\n","#     print('df_performance_table saved at', outputdir)\n","#     df_performance_table.to_csv(df_outputdir+'df_performance_table_rep10_i{}.csv'.format(i), encoding='utf-8')\n","\n","#     display(df_performance_table)\n","\n","\n","# df_performance_table_all = get_rep10_stats(df_outputdir, rep_n)\n","# display(df_performance_table_all)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"QpafyRhmhiR4","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}