{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"stage2_DANN_HPsearch.ipynb","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMUHTmGSnPEG+rEpBubjphB"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"Isjqqa84yJv-","colab_type":"text"},"source":["**stage2_DANN_HPsearch.ipynb**. This notebook attempts to search the hyperparameter that yields the optimal validation performance.\n","\n","**Edit**<br/>\n","\n","**TODO**<br/>"]},{"cell_type":"markdown","metadata":{"id":"nswy3ke-TUyA","colab_type":"text"},"source":["# Import packages and get authenticated"]},{"cell_type":"code","metadata":{"id":"dR0gs1Ya0xmy","colab_type":"code","colab":{}},"source":["from google.colab import drive\n","drive.mount('drive')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DD6EM010PDWn","colab_type":"code","colab":{}},"source":["import numpy as np\n","\n","import pandas as pd\n","pd.set_option('display.max_columns', 500)\n","from tqdm import tqdm_notebook as tqdm\n","from IPython.display import display\n","import os\n","import sys\n","sys.path.append('/content/drive/My Drive/中研院/repo/')\n","\n","from utilities import *\n","from models import *\n","from dataset_util import *\n","from training_util import *\n","from eval_util import *\n","\n","import time\n","import datetime\n","from datetime import datetime\n","import json\n","\n","%matplotlib inline\n","import matplotlib\n","import matplotlib.pyplot as plt\n","matplotlib.rc( 'savefig', facecolor = 'white' )\n","\n","from sklearn.decomposition import PCA\n","\n","import torch\n","from torch.utils.data import Dataset, DataLoader\n","import torch.nn as nn\n","import torch.nn.functional as F"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TBArMSJl7xee","colab_type":"code","colab":{}},"source":["CV_n = 17\n","tasks_list = [('UMAFall_wrist', 'UPFall_neck'), ('UMAFall_wrist', 'UPFall_belt'), ('UMAFall_wrist', 'UPFall_ankle'),\n","              ('UMAFall_waist', 'UPFall_neck'), ('UMAFall_waist', 'UPFall_wrist'), ('UMAFall_waist', 'UPFall_ankle'),\n","              ('UMAFall_ankle', 'UPFall_neck'), ('UMAFall_ankle', 'UPFall_wrist'), ('UMAFall_ankle', 'UPFall_belt')]\n","\n","CV_n = 15\n","tasks_list = [('UMAFall_wrist', 'UPFall_rightpocket'), ('UMAFall_waist', 'UPFall_rightpocket'), ('UMAFall_ankle', 'UPFall_rightpocket'),\n","              ('UMAFall_leg', 'UPFall_neck'), ('UMAFall_leg', 'UPFall_wrist'), ('UMAFall_leg', 'UPFall_belt'), ('UMAFall_leg', 'UPFall_ankle')]\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9RdfojPmJEB-","colab_type":"text"},"source":["# new arch HP search"]},{"cell_type":"code","metadata":{"id":"6wwEtPRF9euK","colab_type":"code","colab":{}},"source":["def get_optimal(df_performance_table_agg):\n","  df_performance_table_agg_temp = df_performance_table_agg.copy()\n","\n","  result = df_performance_table_agg_temp[['HP_i0','HP_i1','HP_i2']].sort_values(by='DANN', ascending=False, axis=1)\n","  batch_size_optimal = result.loc['batch_size'][0]\n","\n","  result = df_performance_table_agg_temp[['HP_i3','HP_i3_1','HP_i4']].sort_values(by='DANN', ascending=False, axis=1)\n","  channel_n_optimal = result.loc['channel_n'][0]\n","\n","  result = df_performance_table_agg_temp[['HP_i5','HP_i5_1','HP_i6']].sort_values(by='DANN', ascending=False, axis=1)\n","  learning_rate_optimal = result.loc['learning_rate'][0]\n","\n","  return int(batch_size_optimal), int(channel_n_optimal), learning_rate_optimal"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_rc2TiHRJIOu","colab_type":"code","colab":{}},"source":["# fine-tuning\n","\n","tasks_list = [('UMAFall_waist', 'UPFall_wrist')]\n","\n","extractor_type = 'CNN'\n","num_epochs = 10\n","CV_n = 17\n","rep_n = 10\n","device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n","\n","training_params_list = [\n","  {\n","    'HP_name': 'HP_i0',\n","    'classes_n': 2,\n","    'CV_n': CV_n,\n","    'num_epochs': num_epochs,\n","    'channel_n': 4,\n","    'batch_size': 16,\n","    'learning_rate': 0.01,\n","    'extractor_type': extractor_type,\n","    'device': device,\n","    'dropout': 0.5,\n","    'hiddenDim_f': 3,\n","    'hiddenDim_y': 3,\n","    'hiddenDim_d': 3,\n","    'win_size': 18,\n","    'win_stride': 6,\n","    'step_n': 9,\n","  },\n","\n","  {\n","    'HP_name': 'HP_i1',\n","    'classes_n': 2,\n","    'CV_n': CV_n,\n","    'num_epochs': num_epochs,\n","    'channel_n': 4,\n","    'batch_size': 4,\n","    'learning_rate': 0.01,\n","    'extractor_type': extractor_type,\n","    'device': device,\n","    'dropout': 0.5,\n","    'hiddenDim_f': 3,\n","    'hiddenDim_y': 3,\n","    'hiddenDim_d': 3,\n","    'win_size': 18,\n","    'win_stride': 6,\n","    'step_n': 9,\n","  },\n","\n","  {\n","    'HP_name': 'HP_i2',\n","    'classes_n': 2,\n","    'CV_n': CV_n,\n","    'num_epochs': num_epochs,\n","    'channel_n': 4,\n","    'batch_size': 64,\n","    'learning_rate': 0.01,\n","    'extractor_type': extractor_type,\n","    'device': device,\n","    'dropout': 0.5,\n","    'hiddenDim_f': 3,\n","    'hiddenDim_y': 3,\n","    'hiddenDim_d': 3,\n","    'win_size': 18,\n","    'win_stride': 6,\n","    'step_n': 9,\n","  },\n","    \n","  {\n","    'HP_name': 'HP_i3',\n","    'classes_n': 2,\n","    'CV_n': CV_n,\n","    'num_epochs': num_epochs,\n","    'channel_n': 16,\n","    'batch_size': 4,\n","    'learning_rate': 0.01,\n","    'extractor_type': extractor_type,\n","    'device': device,\n","    'dropout': 0.5,\n","    'hiddenDim_f': 3,\n","    'hiddenDim_y': 3,\n","    'hiddenDim_d': 3,\n","    'win_size': 18,\n","    'win_stride': 6,\n","    'step_n': 9,\n","  },\n","\n","  {\n","    'HP_name': 'HP_i4',\n","    'classes_n': 2,\n","    'CV_n': CV_n,\n","    'num_epochs': num_epochs,\n","    'channel_n': 32,\n","    'batch_size': 4,\n","    'learning_rate': 0.01,\n","    'extractor_type': extractor_type,\n","    'device': device,\n","    'dropout': 0.5,\n","    'hiddenDim_f': 3,\n","    'hiddenDim_y': 3,\n","    'hiddenDim_d': 3,\n","    'win_size': 18,\n","    'win_stride': 6,\n","    'step_n': 9,\n","  },\n","\n","  {\n","    'HP_name': 'HP_i5',\n","    'classes_n': 2,\n","    'CV_n': CV_n,\n","    'num_epochs': num_epochs,\n","    'channel_n': 4,\n","    'batch_size': 4,\n","    'learning_rate': 0.001,\n","    'extractor_type': extractor_type,\n","    'device': device,\n","    'dropout': 0.5,\n","    'hiddenDim_f': 3,\n","    'hiddenDim_y': 3,\n","    'hiddenDim_d': 3,\n","    'win_size': 18,\n","    'win_stride': 6,\n","    'step_n': 9,\n","  },\n","\n","  {\n","    'HP_name': 'HP_i6',\n","    'classes_n': 2,\n","    'CV_n': CV_n,\n","    'num_epochs': num_epochs,\n","    'channel_n': 4,\n","    'batch_size': 4,\n","    'learning_rate': 0.0001,\n","    'extractor_type': extractor_type,\n","    'device': device,\n","    'dropout': 0.5,\n","    'hiddenDim_f': 3,\n","    'hiddenDim_y': 3,\n","    'hiddenDim_d': 3,\n","    'win_size': 18,\n","    'win_stride': 6,\n","    'step_n': 9,\n","  }, ]\n","\n","stage2_folder = 'stage2_modeloutput_18hz_LOO'\n","\n","for task_item in tasks_list:\n","  (src_name, tgt_name) = task_item\n","\n","  inputdir = '/content/drive/My Drive/中研院/data_mic/stage1_preprocessed_18hz_LOO/'\n","\n","  outputdir = '/content/drive/My Drive/中研院/data_mic/{}/{}_{}/'.format(stage2_folder, src_name, tgt_name)\n","  if not os.path.exists(outputdir):\n","      os.makedirs(outputdir)\n","  print('outputdir for stage2 {} output: {}'.format(task_item, outputdir))\n","\n","  df_outputdir = outputdir+'HP_search/'\n","  if not os.path.exists(df_outputdir):\n","    os.makedirs(df_outputdir)\n","  print('df_performance_table_agg saved at', df_outputdir)\n","\n","  df_performance_table_agg = pd.DataFrame('', index=['channel_n', 'batch_size', 'learning_rate', \n","                                                  'source', 'DANN', 'target', 'domain', 'time_elapsed', 'num_params'], columns=[])\n","\n","  # 1. try all HP\n","  for i, training_params in enumerate(training_params_list):\n","    if 'rightpocket' in src_name or 'leg' in tgt_name or 'rightpocket' in tgt_name or 'leg' in src_name:\n","      training_params['CV_n'] = 15\n","    else:\n","      training_params['CV_n'] = 17\n","    df_performance_table = performance_table(src_name, tgt_name, training_params, inputdir, outputdir)\n","    df_performance_table_agg[training_params['HP_name']] = df_performance_table\n","\n","\n","  # 2. agg all HP\n","  df_performance_table_agg['HP_i3_1'] = df_performance_table_agg['HP_i1']\n","  df_performance_table_agg['HP_i5_1'] = df_performance_table_agg['HP_i1']\n","  # df_performance_table_agg = df_performance_table_agg[['HP_i0','HP_i1','HP_i2','HP_i3','HP_i3_1','HP_i4','HP_i5','HP_i5_1','HP_i6']]\n","\n","  # 3 run optimal param for a task\n","  batch_size_optimal, channel_n_optimal, learning_rate_optimal = get_optimal(df_performance_table_agg)\n","  training_params_optimal = training_params.copy()\n","  training_params_optimal['HP_name'] = 'HP_optimal'\n","  training_params_optimal['batch_size'] = batch_size_optimal\n","  training_params_optimal['channel_n'] = channel_n_optimal\n","  training_params_optimal['learning_rate'] = learning_rate_optimal\n","\n","  df_performance_table = performance_table(src_name, tgt_name, training_params_optimal, inputdir, outputdir)\n","  df_performance_table_agg[training_params_optimal['HP_name']] = df_performance_table\n","  \n","  df_performance_table_agg = df_performance_table_agg[['HP_i0','HP_i1','HP_i2','HP_i3','HP_i3_1','HP_i4','HP_i5','HP_i5_1','HP_i6','HP_optimal']]\n","  display(df_performance_table_agg)\n","\n","  print('df_outputdir for stage2 df_performance_table_agg:', df_outputdir)\n","  df_performance_table_agg.to_csv(df_outputdir+'df_performance_table_agg.csv', encoding='utf-8')\n","\n","  # Serialize data into file:\n","  json.dump({key:val for key, val in training_params.items() if key != 'device'}, open(df_outputdir+'optimal_training_params.json', 'w'))\n","\n","\n","\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"2aClbgC2zC6F","colab_type":"code","colab":{}},"source":["# df_performance_table = pd.DataFrame('', index=['source', 'DANN', 'target', 'domain', 'time_elapsed'], columns=[])\n","# df_performance_table.loc['source', 'q1'] = 0\n","# df_performance_table.loc['target', 'q2'] = -1\n","\n","# df_performance_table_agg['HP_3_1'] = df_performance_table_agg['HP_1']\n","# df_performance_table_agg['HP_5_1'] = df_performance_table_agg['HP_1']\n","# # df_performance_table_agg = df_performance_table_agg[['HP_i0','HP_i1','HP_i2','HP_i3','HP_i3_1','HP_i4','HP_i5','HP_i5_1','HP_i6']]\n","# display(df_performance_table_agg)\n","# df_performance_table_agg\n","# batch_size_optimal, channel_n_optimal, learning_rate_optimal = get_optimal(df_performance_table_agg)\n","# batch_size_optimal, channel_n_optimal, learning_rate_optimal\n","\n","# df_performance_table_agg.iloc['HP_i0', 'source'] = 'sds+ds'\n","# df_performance_table_agg.loc['source','HP_i0'] = '{:.3f}±{:.3f}'.format(0.0232, 123.2321)\n","\n","# batch_size_optimal, channel_n_optimal, learning_rate_optimal = get_optimal(df_performance_table_agg)\n","# batch_size_optimal, channel_n_optimal, learning_rate_optimal\n","optimal_training_params = training_params.copy()\n","optimal_training_params\n","# df_performance_table_agg"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DnBKjuPPuAdj","colab_type":"code","colab":{}},"source":["## fine-tuning\n","\n","# # tasks_list = [('UMAFall_wrist', 'UPFall_neck'), ('UMAFall_wrist', 'UPFall_belt'), ('UMAFall_wrist', 'UPFall_ankle'),\n","# #               ('UMAFall_waist', 'UPFall_neck'), ('UMAFall_waist', 'UPFall_wrist'), ('UMAFall_waist', 'UPFall_ankle'),\n","# #               ('UMAFall_ankle', 'UPFall_neck'), ('UMAFall_ankle', 'UPFall_wrist'), ('UMAFall_ankle', 'UPFall_belt')]\n","\n","# # tasks_list = [('UMAFall_wrist', 'UPFall_ankle'),\n","# #               ('UMAFall_waist', 'UPFall_neck'), ('UMAFall_waist', 'UPFall_wrist'), ('UMAFall_waist', 'UPFall_ankle'),\n","# #               ('UMAFall_ankle', 'UPFall_neck'), ('UMAFall_ankle', 'UPFall_wrist'), ('UMAFall_ankle', 'UPFall_belt')]\n","\n","# # tasks_list = [('UMAFall_waist', 'UPFall_ankle'),\n","# #               ('UMAFall_ankle', 'UPFall_neck'), ('UMAFall_ankle', 'UPFall_wrist'), ('UMAFall_ankle', 'UPFall_belt')]\n","\n","# # tasks_list = [('UMAFall_ankle', 'UPFall_wrist'), ('UMAFall_ankle', 'UPFall_belt')]\n","# # tasks_list = [('UMAFall_chest', 'UPFall_wrist'),\n","# # tasks_list = [('UMAFall_chest', 'UPFall_belt'),('UMAFall_chest', 'UPFall_rightpocket'),('UMAFall_chest', 'UPFall_ankle')]\n","# tasks_list = [('UMAFall_leg', 'UPFall_wrist'),('UMAFall_leg', 'UPFall_neck')]\n","\n","\n","# extractor_type = 'CNN'\n","# num_epochs = 2\n","# CV_n = 2\n","# device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n","\n","# training_params_list = [\n","#   {\n","#     'HP_name': 'HP_0',\n","#     'classes_n': 2,\n","#     'CV_n': CV_n,\n","#     'num_epochs': num_epochs,\n","#     'channel_n': 4,\n","#     'batch_size': 16,\n","#     'learning_rate': 0.01,\n","#     'extractor_type': extractor_type,\n","#     'device': device,\n","#     'dropout': 0.5,\n","#     'hiddenDim_f': 3,\n","#     'hiddenDim_y': 3,\n","#     'hiddenDim_d': 3,\n","#     'win_size': 18,\n","#     'win_stride': 6,\n","#     'step_n': 9,\n","#   },\n","\n","#   {\n","#     'HP_name': 'HP_1',\n","#     'classes_n': 2,\n","#     'CV_n': CV_n,\n","#     'num_epochs': num_epochs,\n","#     'channel_n': 4,\n","#     'batch_size': 4,\n","#     'learning_rate': 0.01,\n","#     'extractor_type': extractor_type,\n","#     'device': device,\n","#     'dropout': 0.5,\n","#     'hiddenDim_f': 3,\n","#     'hiddenDim_y': 3,\n","#     'hiddenDim_d': 3,\n","#     'win_size': 18,\n","#     'win_stride': 6,\n","#     'step_n': 9,\n","#   },\n","\n","#   {\n","#     'HP_name': 'HP_2',\n","#     'classes_n': 2,\n","#     'CV_n': CV_n,\n","#     'num_epochs': num_epochs,\n","#     'channel_n': 4,\n","#     'batch_size': 64,\n","#     'learning_rate': 0.01,\n","#     'extractor_type': extractor_type,\n","#     'device': device,\n","#     'dropout': 0.5,\n","#     'hiddenDim_f': 3,\n","#     'hiddenDim_y': 3,\n","#     'hiddenDim_d': 3,\n","#     'win_size': 18,\n","#     'win_stride': 6,\n","#     'step_n': 9,\n","#   },\n","    \n","#   {\n","#     'HP_name': 'HP_3',\n","#     'classes_n': 2,\n","#     'CV_n': CV_n,\n","#     'num_epochs': num_epochs,\n","#     'channel_n': 16,\n","#     'batch_size': 4,\n","#     'learning_rate': 0.01,\n","#     'extractor_type': extractor_type,\n","#     'device': device,\n","#     'dropout': 0.5,\n","#     'hiddenDim_f': 3,\n","#     'hiddenDim_y': 3,\n","#     'hiddenDim_d': 3,\n","#     'win_size': 18,\n","#     'win_stride': 6,\n","#     'step_n': 9,\n","#   },\n","\n","#   {\n","#     'HP_name': 'HP_4',\n","#     'classes_n': 2,\n","#     'CV_n': CV_n,\n","#     'num_epochs': num_epochs,\n","#     'channel_n': 32,\n","#     'batch_size': 4,\n","#     'learning_rate': 0.01,\n","#     'extractor_type': extractor_type,\n","#     'device': device,\n","#     'dropout': 0.5,\n","#     'hiddenDim_f': 3,\n","#     'hiddenDim_y': 3,\n","#     'hiddenDim_d': 3,\n","#     'win_size': 18,\n","#     'win_stride': 6,\n","#     'step_n': 9,\n","#   },\n","\n","#   {\n","#     'HP_name': 'HP_5',\n","#     'classes_n': 2,\n","#     'CV_n': CV_n,\n","#     'num_epochs': num_epochs,\n","#     'channel_n': 4,\n","#     'batch_size': 4,\n","#     'learning_rate': 0.001,\n","#     'extractor_type': extractor_type,\n","#     'device': device,\n","#     'dropout': 0.5,\n","#     'hiddenDim_f': 3,\n","#     'hiddenDim_y': 3,\n","#     'hiddenDim_d': 3,\n","#     'win_size': 18,\n","#     'win_stride': 6,\n","#     'step_n': 9,\n","#   },\n","\n","#   {\n","#     'HP_name': 'HP_6',\n","#     'classes_n': 2,\n","#     'CV_n': CV_n,\n","#     'num_epochs': num_epochs,\n","#     'channel_n': 4,\n","#     'batch_size': 4,\n","#     'learning_rate': 0.0001,\n","#     'extractor_type': extractor_type,\n","#     'device': device,\n","#     'dropout': 0.5,\n","#     'hiddenDim_f': 3,\n","#     'hiddenDim_y': 3,\n","#     'hiddenDim_d': 3,\n","#     'win_size': 18,\n","#     'win_stride': 6,\n","#     'step_n': 9,\n","#   }, ]\n","\n","# stage2_folder = 'stage2_modeloutput_18hz_LOO'\n","\n","# for task_item in tasks_list:\n","#   (src_name, tgt_name) = task_item\n","\n","#   # 1. try all HP\n","#   for i, training_params in enumerate(training_params_list):\n","#     # if tgt_name == 'UPFall_rightpocket':\n","#     #   training_params['CV_n'] = 15\n","#     # else:\n","#     #   training_params['CV_n'] = 17\n","\n","#     start_time = time.time()\n","#     df_performance_table = pd.DataFrame('', index=['source', 'DANN', 'target', 'domain'], columns=[])\n","\n","#     inputdir = '/content/drive/My Drive/中研院/data_mic/stage1_preprocessed_18hz_LOO/'\n","#     outputdir = '/content/drive/My Drive/中研院/data_mic/{}/{}_{}/'.format(stage2_folder, src_name, tgt_name)\n","#     if not os.path.exists(outputdir):\n","#         os.makedirs(outputdir)\n","#     print('outputdir for stage2 output:', outputdir)\n","\n","#     df_performance_table = performance_table(df_performance_table, src_name, tgt_name, training_params, inputdir, outputdir)\n","\n","#     time_elapsed = time.time() - start_time\n","#     print('time elapsed:', time_elapsed)\n","#     df_performance_table.loc['time_elapsed'] = time_elapsed\n","    \n","\n","#     df_performance_table_agg[training_params['HP_name']] = df_performance_table\n","#     display(df_performance_table)\n","\n","#   df_outputdir = outputdir+'HP_search/'\n","#   if not os.path.exists(df_outputdir):\n","#     os.makedirs(df_outputdir)\n","\n","#   print('df_outputdir for stage2 df_performance_table_agg:', df_outputdir)\n","#   df_performance_table_agg.to_csv(df_outputdir+'df_performance_table_HP_agg.csv', encoding='utf-8')\n","#   display(df_performance_table_agg)\n","\n","#   # 2. agg all HP\n","#   df_performance_table_agg = pd.DataFrame('', index=['channel_n', 'batch_size', 'learning_rate', \n","#                                                   'source', 'DANN', 'target', 'domain', 'time_elapsed'], columns=[])\n","#   for i, training_params in enumerate(training_params_list):\n","#     # df_inputdir = outputdir+'HP_search/df_performance_table_HP_i{}.csv'.format(i)\n","\n","#     # df_performance_table = pd.read_csv(df_inputdir, index_col=0)\n","    \n","#     # df_performance_table = df_performance_table.rename(columns={src_name+'_'+tgt_name: 'HP_i{}'.format(i)})\n","#     # df_performance_table_agg['HP_i{}'.format(i)] = df_performance_table\n","#     df_performance_table_agg['HP_i{}'.format(i)]['channel_n'] = training_params['channel_n']\n","#     df_performance_table_agg['HP_i{}'.format(i)]['batch_size'] = training_params['batch_size']\n","#     df_performance_table_agg['HP_i{}'.format(i)]['learning_rate'] = training_params['learning_rate']\n","\n","#   df_performance_table_agg['HP_i3_1'] = df_performance_table_agg['HP_i1']\n","#   df_performance_table_agg['HP_i5_1'] = df_performance_table_agg['HP_i1']\n","#   df_performance_table_agg = df_performance_table_agg[['HP_i0','HP_i1','HP_i2','HP_i3','HP_i3_1','HP_i4','HP_i5','HP_i5_1','HP_i6']]\n","#   display(df_performance_table_agg)\n","\n","#   # 3 run optimal param for a task\n","#   df_performance_table_agg_temp = df_performance_table_agg.copy()\n","#   df_performance_table_agg_temp.loc['DANN'] = df_performance_table_agg_temp.loc['DANN'].str.split('±').str[0].astype(float)\n","\n","#   result = df_performance_table_agg_temp[['HP_i0','HP_i1','HP_i2']].sort_values(by='DANN', ascending=False, axis=1)\n","#   batch_size_optimal = result.loc['batch_size'][0]\n","\n","#   result = df_performance_table_agg_temp[['HP_i3','HP_i3_1','HP_i4']].sort_values(by='DANN', ascending=False, axis=1)\n","#   channel_n_optimal = result.loc['channel_n'][0]\n","\n","#   result = df_performance_table_agg_temp[['HP_i5','HP_i5_1','HP_i6']].sort_values(by='DANN', ascending=False, axis=1)\n","#   learning_rate_optimal = result.loc['learning_rate'][0]\n","\n","#   training_params['batch_size'] = batch_size_optimal\n","#   training_params['channel_n'] = channel_n_optimal\n","#   training_params['learning_rate'] = learning_rate_optimal\n","\n","#   start_time = time.time()\n","\n","#   df_performance_table = pd.DataFrame('', index=['source', 'DANN', 'target', 'domain'], columns=[])\n","\n","#   inputdir = '/content/drive/My Drive/中研院/data_mic/stage1_preprocessed_18hz_LOO/'\n","#   outputdir = '/content/drive/My Drive/中研院/data_mic/{}/{}_{}/'.format(stage2_folder, src_name, tgt_name)\n","\n","#   df_performance_table = performance_table(df_performance_table, src_name, tgt_name, training_params, inputdir, outputdir)\n","\n","#   time_elapsed = time.time() - start_time\n","#   print('time elapsed:', time_elapsed)\n","#   df_performance_table.loc['time_elapsed'] = time_elapsed\n","\n","#   df_performance_table_agg['HP_optimal'] = df_performance_table\n","#   df_performance_table_agg['HP_optimal']['channel_n'] = channel_n_optimal\n","#   df_performance_table_agg['HP_optimal']['batch_size'] = batch_size_optimal\n","#   df_performance_table_agg['HP_optimal']['learning_rate'] = learning_rate_optimal\n","\n","#   df_outputdir = outputdir+'HP_search/'\n","#   if not os.path.exists(df_outputdir):\n","#     os.makedirs(df_outputdir)\n","\n","#   print('df_outputdir for stage2 df_performance_table_agg:', df_outputdir)\n","#   df_performance_table_agg.to_csv(df_outputdir+'df_performance_table_HP_agg.csv', encoding='utf-8')\n","\n","#   # print('df_performance_table saved at', df_outputdir)\n","#   # df_performance_table.to_csv(df_outputdir+'df_performance_table_HP_optimal.csv', encoding='utf-8')\n","\n","#   # Serialize data into file:\n","#   json.dump({key:val for key, val in training_params.items() if key != 'device'}, open(df_outputdir+'optimal_training_params.json', 'w'))\n","\n","#   print('batch_size_optimal, channel_n_optimal, learning_rate_optimal:', batch_size_optimal, channel_n_optimal, learning_rate_optimal)\n","\n","#   display(df_performance_table)\n","\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"27nX_6AR0L5A","colab_type":"code","colab":{}},"source":["training_params['HP_name']"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5NazVXNcjV-z","colab_type":"code","colab":{}},"source":["# stage2_folder = 'stage2_modeloutput_18hz_LOO'\n","\n","# for task_item in tasks_list:\n","#   (src_name, tgt_name) = task_item\n","\n","#   df_performance_table_agg = pd.DataFrame('', index=['channel_n', 'batch_size', 'learning_rate', \n","#                                                     'source', 'DANN', 'target', 'domain', 'time_elapsed'], columns=[])\n","\n","#   for i, training_params in enumerate(training_params_list):\n","#     inputdir = '/content/drive/My Drive/中研院/data_mic/{}/{}_{}/'.format(stage2_folder, src_name, tgt_name)\n","\n","#     df_inputdir = inputdir+'HP_search/df_performance_table_HP_i{}.csv'.format(i)\n","\n","\n","#     df_performance_table = pd.read_csv(df_inputdir, index_col=0)\n","    \n","#     df_performance_table = df_performance_table.rename(columns={src_name+'_'+tgt_name: 'HP_i{}'.format(i)})\n","#     df_performance_table_agg['HP_i{}'.format(i)] = df_performance_table\n","#     df_performance_table_agg['HP_i{}'.format(i)]['channel_n'] = training_params['channel_n']\n","#     df_performance_table_agg['HP_i{}'.format(i)]['batch_size'] = training_params['batch_size']\n","#     df_performance_table_agg['HP_i{}'.format(i)]['learning_rate'] = training_params['learning_rate']\n","\n","#   df_performance_table_agg['HP_i3_1'] = df_performance_table_agg['HP_i1']\n","#   df_performance_table_agg['HP_i5_1'] = df_performance_table_agg['HP_i1']\n","#   df_performance_table_agg = df_performance_table_agg[['HP_i0','HP_i1','HP_i2','HP_i3','HP_i3_1','HP_i4','HP_i5','HP_i5_1','HP_i6']]\n","#   display(df_performance_table_agg)\n","\n","#   print('df_outputdir for stage2 df_performance_table_agg:', inputdir)\n","\n","#   df_performance_table_agg.to_csv(inputdir+'HP_search/df_performance_table_HP_agg.csv', encoding='utf-8')\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"DlwHb3EfWHZr"},"source":["# hyperparameter fine-tuning"]},{"cell_type":"code","metadata":{"id":"XlHlSQ8DZtAE","colab_type":"code","colab":{}},"source":["# # fine-tuning\n","\n","# CV_n = 17\n","# extractor_type = 'CNN'\n","\n","# training_params_list = [\n","#   {\n","#     'classes_n': 2,\n","#     'CV_n': CV_n,\n","#     'num_epochs': 10,\n","#     'channel_n': 4,\n","#     'batch_size': 16,\n","#     'learning_rate': 0.01,\n","#     'extractor_type': extractor_type,\n","#     'dropout': 0.5,\n","#     'hiddenDim_f': 3,\n","#     'hiddenDim_y': 3,\n","#     'hiddenDim_d': 3,\n","#     'win_size': 18,\n","#     'win_stride': 6,\n","#     'step_n': 9,\n","#   },\n","\n","#   {\n","#     'classes_n': 2,\n","#     'CV_n': CV_n,\n","#     'num_epochs': 10,\n","#     'channel_n': 4,\n","#     'batch_size': 4,\n","#     'learning_rate': 0.01,\n","#     'extractor_type': extractor_type,\n","#     'dropout': 0.5,\n","#     'hiddenDim_f': 3,\n","#     'hiddenDim_y': 3,\n","#     'hiddenDim_d': 3,\n","#     'win_size': 18,\n","#     'win_stride': 6,\n","#     'step_n': 9,\n","#   },\n","\n","#   {\n","#     'classes_n': 2,\n","#     'CV_n': CV_n,\n","#     'num_epochs': 10,\n","#     'channel_n': 4,\n","#     'batch_size': 64,\n","#     'learning_rate': 0.01,\n","#     'extractor_type': extractor_type,\n","#     'dropout': 0.5,\n","#     'hiddenDim_f': 3,\n","#     'hiddenDim_y': 3,\n","#     'hiddenDim_d': 3,\n","#     'win_size': 18,\n","#     'win_stride': 6,\n","#     'step_n': 9,\n","#   },\n","    \n","#   {\n","#     'classes_n': 2,\n","#     'CV_n': CV_n,\n","#     'num_epochs': 10,\n","#     'channel_n': 16,\n","#     'batch_size': 4,\n","#     'learning_rate': 0.01,\n","#     'extractor_type': extractor_type,\n","#     'dropout': 0.5,\n","#     'hiddenDim_f': 3,\n","#     'hiddenDim_y': 3,\n","#     'hiddenDim_d': 3,\n","#     'win_size': 18,\n","#     'win_stride': 6,\n","#     'step_n': 9,\n","#   },\n","\n","#   {\n","#     'classes_n': 2,\n","#     'CV_n': CV_n,\n","#     'num_epochs': 10,\n","#     'channel_n': 32,\n","#     'batch_size': 4,\n","#     'learning_rate': 0.01,\n","#     'extractor_type': extractor_type,\n","#     'dropout': 0.5,\n","#     'hiddenDim_f': 3,\n","#     'hiddenDim_y': 3,\n","#     'hiddenDim_d': 3,\n","#     'win_size': 18,\n","#     'win_stride': 6,\n","#     'step_n': 9,\n","#   },\n","\n","#   {\n","#     'classes_n': 2,\n","#     'CV_n': CV_n,\n","#     'num_epochs': 10,\n","#     'channel_n': 4,\n","#     'batch_size': 4,\n","#     'learning_rate': 0.001,\n","#     'extractor_type': extractor_type,\n","#     'dropout': 0.5,\n","#     'hiddenDim_f': 3,\n","#     'hiddenDim_y': 3,\n","#     'hiddenDim_d': 3,\n","#     'win_size': 18,\n","#     'win_stride': 6,\n","#     'step_n': 9,\n","#   },\n","\n","#   {\n","#     'classes_n': 2,\n","#     'CV_n': CV_n,\n","#     'num_epochs': 10,\n","#     'channel_n': 4,\n","#     'batch_size': 4,\n","#     'learning_rate': 0.0001,\n","#     'extractor_type': extractor_type,\n","#     'dropout': 0.5,\n","#     'hiddenDim_f': 3,\n","#     'hiddenDim_y': 3,\n","#     'hiddenDim_d': 3,\n","#     'win_size': 18,\n","#     'win_stride': 6,\n","#     'step_n': 9,\n","#   }, ]\n","\n","# tasks_list = [('UMAFall_waist', 'UPFall_belt')]\n","\n","# # tasks_list = [('UMAFall_ankle', 'UPFall_ankle')]\n","# # tasks_list = [('UMAFall_wrist', 'UPFall_wrist')]\n","# # tasks_list = [('UMAFall_leg', 'UPFall_rightpocket')]\n","# # tasks_list = [('UPFall_belt', 'UMAFall_waist')]\n","\n","# stage2_folder = 'stage2_modeloutput_18hz_LOO'\n","\n","# for task_item in tasks_list:\n","#   (src_name, tgt_name) = task_item\n","\n","#   for i, training_params in enumerate(training_params_list):\n","#     start_time = time.time()\n","#     df_performance_table = pd.DataFrame('', index=['source', 'DANN', 'target', 'domain'], columns=[])\n","\n","#   # for task_item in tasks_list:\n","#   #   (src_name, tgt_name) = task_item\n","\n","#     inputdir = '/content/drive/My Drive/中研院/data_mic/stage1_preprocessed_18hz_LOO/'\n","#     outputdir = '/content/drive/My Drive/中研院/data_mic/{}/{}_{}/'.format(stage2_folder, src_name, tgt_name)\n","#     if not os.path.exists(outputdir):\n","#         os.makedirs(outputdir)\n","#     print('outputdir for stage2 output:', outputdir)\n","\n","#     df_performance_table = performance_table(df_performance_table, src_name, tgt_name, training_params, inputdir, outputdir)\n","\n","#     time_elapsed = time.time() - start_time\n","#     print('time elapsed:', time_elapsed)\n","#     df_performance_table.loc['time_elapsed'] = time_elapsed\n","\n","#     df_outputdir = outputdir+'HP_search/'\n","#     if not os.path.exists(df_outputdir):\n","#       os.makedirs(df_outputdir)\n","\n","#     print('df_performance_table saved at', df_outputdir)\n","#     df_performance_table.to_csv(df_outputdir+'df_performance_table_HP_i{}.csv'.format(i), encoding='utf-8')\n","\n","#     display(df_performance_table)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jZ28VOuXZs9b","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TP8mnbCMZs3T","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DEMl8O6SZsw6","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"3B6xF-AO0UiV","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JWcFYNkc1S12","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}